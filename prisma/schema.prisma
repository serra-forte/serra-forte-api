// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  DELIVERYMAN
  SHOPKEEPER
  GUEST
  SUPER
}

model User {
  id                 String    @id @unique @default(uuid())
  idCustomerAsaas    String?
  name               String
  email              String    @unique
  password           String?
  phone              String?   @unique
  dateBirth          DateTime? @map("date_birth") @db.Timestamptz()
  cpf                String?   @unique
  emailActive        Boolean   @default(false)
  role               Role      @default(GUEST)
  createdAt          DateTime  @default(now())
  refundCredit       Decimal?  @default(0) @map("refund_credit")
  expireRefundCredit DateTime? @map("expire_refund_credit")

  // address   Address[]
  tokens       Token[]
  // images    Image[]
  images       Image[]
  shoppingCart ShoppingCart?
  Order        Order[]

  @@map("users")
}

model Token {
  id            String   @id @unique @default(uuid())
  token         String?  @unique
  tokenGoogle   String?
  tokenFacebook String?
  expireDate    DateTime
  createdAt     DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([token], name: "token_index")
  @@map("tokens")
}

model Category {
  id          String    @id @unique @default(uuid())
  name        String
  description String?
  Product     Product[]

  @@index([name], name: "type_index") // Definindo um Ã­ndice no campo 'type'
  @@map("categories")
}

model Product {
  id         String    @id @unique @default(uuid())
  code       Int       @default(autoincrement())
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  name        String     @unique
  description String?
  mainImage   String     @map("main_image")
  price       Decimal
  quantity    Int
  active      Boolean?   @default(false)
  createdAt   DateTime   @default(now()) @map("created_at")
  cartItem    CartItem[]
  Item        Item[]

  @@index([name], name: "id_index")
  @@map("products")
}

model Image {
  id       String  @id @unique @default(uuid())
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  name     String
  hashName String? @unique
  url      String

  @@index([id])
  @@index([userId], name: "userId_index")
  @@map("images")
}

model ShoppingCart {
  id         String     @id @unique @default(uuid())
  user       User       @relation(fields: [userId], references: [id])
  userId     String     @unique @map("user_id")
  total      Decimal    @default(0)
  expireDate DateTime   @map("expire_date") @db.Timestamptz()
  cartItem   CartItem[]
  Order      Order[]

  @@map("shopping_carts")
}

model CartItem {
  id             String       @id @unique @default(uuid())
  product        Product      @relation(fields: [productId], references: [id])
  productId      String       @map("product_id")
  shopping       ShoppingCart @relation(fields: [shoppingCartId], references: [id])
  shoppingCartId String       @map("shopping_cart_id")
  quantity       Int          @default(1)

  @@map("cart_items")
}

model Order {
  id             String       @id @unique @default(uuid())
  shoppingCart   ShoppingCart @relation(fields: [shoppingCartId], references: [id])
  shoppingCartId String       @map("shopping_cart_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  total     Decimal
  orderDate DateTime @map("order_date")
  // payment: string;
  // status: enum;
  // discountCoupon: string;
  // delivery: string
  items     Item[]
  createdAt DateTime @default(now()) @map("created_at")
}

model Item {
  id      String @id @unique @default(uuid())
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @map("order_id")

  product   Product @relation(fields: [productId], references: [id])
  productId String  @map("product_id")

  quantity Decimal
  price    Decimal
}
